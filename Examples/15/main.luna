// 15-th game on luna language

import 'const.luna'

// ----- game -----

(shuffle (list) (sort list (lambda (a b) (rand -1 1))))

(swap (list a b)
    (map list (lambda (x) (if (eq x a) b (if (eq x b) a x))))
)

(get_chips () (shuffle (range 0 CHIPS_COUNT)))

(init_game () (set @chips (get_chips)))

(step (row col)
    (set @chips (swap (item (+ (* row COLS) cols) @chips) EMPTY_NUMBER))
)

// ----- input -----

(mouse_handler (event x y)
    (if (eq event 'click') (step (/ y CELL_SIZE) (/ x CELL_SIZE)) (ignore))
)

// ----- render -----

(render_field (context)
    (fill_rect context 0 0 (* COLS CELL_SIZE) (* ROWS CELL_SIZE) FIELD_COLOR)
    (loop 0 ROWS (lambda (row) (draw_line context                 0 (* row CELL_SIZE) (* COLS CELL_SIZE) (*  row CELL_SIZE) BLACK)))
    (loop 0 COLS (lambda (col) (draw_line context (* col CELL_SIZE)                 0 (*  col CELL_SIZE) (* ROWS CELL_SIZE) BLACK)))
)

(render_chip (row col number context)
    (fill_rect context (* col CELL_SIZE) (* row CELL_SIZE) CELL_SIZE CELL_SIZE CELL_COLOR)
    (draw_text context (* col (+ CELL_SIZE CELL_SIZE_HALF)) (* row (+ CELL_SIZE CELL_SIZE_HALF)) number FONT_COLOR FONT_SIZE)
)

(render_chips (context)
    (loop 0 CHIPS_COUNT (lambda (i) (render_chip (/ i COLS) (% i COLS) (item i @chips) context)))
)

(render_handler (context)
    (render_field context)
    (render_chips context)
)

(main_window () (window 'Luna 15 application' render_handler mouse_handler))

(start_app ()
    (init_game)
    (app (main_window))
)

(run (start_app))
